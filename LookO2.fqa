{"name":"LookO2","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_28"},"sections":{"items":[{"components":[{"name":"label","style":{"weight":"1.2"},"text":"Pick desired metric","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"buttonPM1","style":{"weight":"0.33"},"text":"PM1 [ ]","type":"button"},{"name":"buttonPM25","style":{"weight":"0.33"},"text":"PM2.5 [ ]","type":"button"},{"name":"buttonPM10","style":{"weight":"0.33"},"text":"PM10 [ ]","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"updated_at","style":{"weight":"1.2"},"text":"Updated at: ","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_28"}}},"uiCallbacks":[{"callback":"onButtonPM1Click","eventType":"onReleased","name":"buttonPM1"},{"callback":"onButtonPM25Click","eventType":"onReleased","name":"buttonPM25"},{"callback":"onButtonPM10Click","eventType":"onReleased","name":"buttonPM10"}],"quickAppVariables":[{"name":"API_TOKEN","value":""},{"name":"DEVICE_ID","value":""}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"function QuickApp:onInit()\n    self:debug(\"[LookO2] Init quick app\")\n    QuickApp.looko2Client = ApiClient:new(self:getVariable(\"API_TOKEN\"))\n\n    local settings = api.get('/globalVariables/looko2')\n    if settings == nil then\n        self:trace(\"[LookO2] Settings not found, creating with default values\")\n        api.post('/globalVariables', {\n            name = 'looko2',\n            value = json.encode({ \n                schema_version = 1,\n                picked_metric = \"PM2.5\"\n            })\n        })\n    end\n\n    -- self:loop(30)\nend\n\nfunction QuickApp:loop(minutes)\n    -- re-run after 30 minutes\n    fibaro.setTimeout(minutes * 60 * 1000, function() \n        self:loop()\n    end)\n\n    local settings = json.decode(api.get('/globalVariables/looko2').value)\n    self:reloadDeviceData(settings.picked_metric)\nend\n\n\nfunction QuickApp:reloadDeviceData(metric)\n    self:debug(\"[LookO2] Reload device data. Picked Metric: \", metric)\n    self.looko2Client:getLastSensorMesurement(\n        self:getVariable(\"DEVICE_ID\"),\n        function(response)\n            self:debug(\"[LookO2] Got API response\", response)\n\n            self:updateProperty(\"unit\", metric)\n            if (metric == \"PM2.5\") then \n                self:updateProperty(\"value\", tonumber(response.PM25))\n            elseif (metric == \"PM10\") then \n                self:updateProperty(\"value\", tonumber(response.PM10))\n            elseif (metric == \"PM1\") then\n                self:updateProperty(\"value\", tonumber(response.PM1))\n            else \n                self:updateProperty(\"value\", tonumber(response.PM25))\n                self:updateProperty(\"unit\", \"PM2.5\")\n            end\n        end,\n        function(message)\n            self:debug(\"[LookO2] error:\", message)\n        end\n    )\nend\n\nfunction QuickApp:updatePickedMetric(metric)\n    self:debug(\"[LookO2] Update settings. Picked Metric: \", metric)\n\n    self:updateView(\"buttonPM1\", \"text\", \"PM1 [ ]\")\n    self:updateView(\"buttonPM25\", \"text\", \"PM25 [ ]\")\n    self:updateView(\"buttonPM10\", \"text\", \"PM10 [ ]\")\n\n    if (metric == \"PM1\") then \n        self:updateView(\"buttonPM1\", \"text\", \"PM1 [X]\")\n    elseif (metric == \"PM2.5\") then \n        self:updateView(\"buttonPM25\", \"text\", \"PM25 [X]\")\n    elseif (metric == \"PM10\") then\n        self:updateView(\"buttonPM10\", \"text\", \"PM10 [X]\")\n    end\n\n    local response = api.put('/globalVariables/looko2', {\n        value = json.encode({ \n            schema_version = 1,\n            picked_metric = metric\n        })\n    })\nend\n\nfunction QuickApp:onButtonPM25Click(event)\n    self:updatePickedMetric(\"PM2.5\")\n    self:reloadDeviceData(\"PM2.5\")\nend\n\nfunction QuickApp:onButtonPM10Click(event)\n    self:updatePickedMetric(\"PM10\")\n    self:reloadDeviceData(\"PM10\")\nend\n\nfunction QuickApp:onButtonPM1Click(event)\n    self:updatePickedMetric(\"PM1\")\n    self:reloadDeviceData(\"PM1\")\nend"},{"name":"ApiClient","isMain":false,"isOpen":true,"content":"class 'ApiClient'\n\nfunction ApiClient:new(token)\n    self.token = token\n    --self.baseUrl = \"https://b67e27cf3c4f60c683b9cb2bfc41fd6e.m.pipedream.net/\"\n    self.baseUrl = \"http://api.looko2.com/\"\n    return self\nend\n\nfunction ApiClient:getLastSensorMesurement(deviceId, success, error)\n    self:get(\"?method=GetLOOKO&id=\"..deviceId..\"&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:getAllSensors(success, error)\n    self:get(\"?method=GetAll&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:getClosestSensor(lat, long, success, error)\n    self:get(\"?method=GPSGetClosestLooko&lat=\"..lat..\"&lon=\"..long..\"&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:get(query, success, error)\n    local client = net.HTTPClient()\n    client:request(self.baseUrl..query, {\n        options = {\n            method = \"GET\",\n            headers = {\n                [\"Accept\"] = \"application/json\"\n            }\n        },\n        success = function (response) \n            success(json.decode(response.data))   \n        end,\n        error = error\n    })\nend"}]}
