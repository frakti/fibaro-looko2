{"name":"LookO2","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_28"},"sections":{"items":[{"components":[{"name":"label","style":{"weight":"1.2"},"text":"Status: ","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Refresh metrics","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button2","style":{"weight":"1.2"},"text":"Disable monthly check of nearest device","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"updated_at","style":{"weight":"1.2"},"text":"Updated at: ","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_28"}}},"uiCallbacks":[{"callback":"onRefreshClick","eventType":"onReleased","name":"button1"},{"callback":"","eventType":"onReleased","name":"button2"}],"quickAppVariables":[{"name":"API_TOKEN","value":""},{"name":"DEVICE_ID","value":""}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"function QuickApp:onInit()\n    self:debug(\"[LookO2] Init quick app\")\n    QuickApp.looko2Client = ApiClient:new(self:getVariable(\"API_TOKEN\"))\n\n    local settings = api.get('/globalVariables/looko2')\n    if settings == nil then\n        self:trace(\"[LookO2] Settings not found, creating with default values\")\n        api.post('/globalVariables', {\n            name = 'looko2',\n            value = json.encode({\n                schema_version = 1\n            })\n        })\n    end\n\n    self.sensorsMap = {}\n\n    self:initChildDevices({\n        [\"com.fibaro.multilevelSensor\"] = AirQualitySensor\n    })\n    self:initializeChildDevices()\n    self:createMissingSensors()\n    self:loop(30)\n    -- self:updateProperty('manufacturer', \"LookO2\")\nend\n\nfunction QuickApp:createChild(sensorLabel)\n    local child = self:createChildDevice({\n        name = sensorLabel,\n        type = \"com.fibaro.multilevelSensor\",\n    }, AirQualitySensor)\n\n    self:trace(\"[LookO2][createChild] Device for \", sensorLabel, \" sensor created under ID \", child.id)\n    return child\nend\n\nfunction QuickApp:getChildDevice(sensorLabel)\n    local deviceId = self.sensorsMap[sensorLabel]\n    return self.childDevices[deviceId]\nend\n\nfunction QuickApp:createMissingSensors()\n    for i, name in ipairs({\"PM1\", \"PM2.5\", \"PM10\"}) do\n        if self.sensorsMap[name] == nil then\n\n          self:debug(\"[LookO2][createMissingSensors] \",name, \" is missing, creating \")\n          self.sensorsMap[name] = self:createChild(name)\n        end\n    end\nend\n\nfunction QuickApp:initializeChildDevices()\n    for id,device in pairs(self.childDevices) do\n        self.sensorsMap[device.name] = id\n        self:debug(\"[LookO2][initChildDevices] Found \", device.name, \" sensor under device ID \", id, \" (type: \", device.type, \")\")\n    end\nend\n\n\nfunction QuickApp:loop(minutes)\n    -- re-run after 30 minutes\n    fibaro.setTimeout(minutes * 60 * 1000, function()\n        self:loop()\n    end)\n\n    local settings = json.decode(api.get('/globalVariables/looko2').value)\n    self:reloadDeviceData(settings)\nend\n\n\nfunction QuickApp:reloadDeviceData(settings)\n    self:debug(\"[LookO2][reloadDeviceData] Triggered\")\n    self.looko2Client:getLastSensorMesurement(\n        self:getVariable(\"DEVICE_ID\"),\n        function(response)\n            self:debug(\"[LookO2] Got API response\", response)\n            self:getChildDevice(\"PM2.5\"):updateProperty(\"value\", tonumber(response.PM25))\n            self:getChildDevice(\"PM10\"):updateProperty(\"value\", tonumber(response.PM10))\n            self:getChildDevice(\"PM1\"):updateProperty(\"value\", tonumber(response.PM1))\n        end,\n        function(message)\n            self:debug(\"[LookO2] error:\", message)\n        end\n    )\nend\n\nfunction QuickApp:onRefreshClick(event)\n    self:reloadDeviceData()\nend\n"},{"name":"ApiClient","isMain":false,"isOpen":true,"content":"class 'ApiClient'\n\nfunction ApiClient:new(token)\n    self.token = token\n    --self.baseUrl = \"https://b67e27cf3c4f60c683b9cb2bfc41fd6e.m.pipedream.net/\"\n    self.baseUrl = \"http://api.looko2.com/\"\n    return self\nend\n\nfunction ApiClient:getLastSensorMesurement(deviceId, success, error)\n    self:get(\"?method=GetLOOKO&id=\"..deviceId..\"&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:getAllSensors(success, error)\n    self:get(\"?method=GetAll&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:getClosestSensor(lat, long, success, error)\n    self:get(\"?method=GPSGetClosestLooko&lat=\"..lat..\"&lon=\"..long..\"&token=\"..self.token, success, error)\nend\n\nfunction ApiClient:get(query, success, error)\n    local client = net.HTTPClient()\n    client:request(self.baseUrl..query, {\n        options = {\n            method = \"GET\",\n            headers = {\n                [\"Accept\"] = \"application/json\"\n            }\n        },\n        success = function (response) \n            success(json.decode(response.data))   \n        end,\n        error = error\n    })\nend"},{"name":"AirQualitySensor","isMain":false,"isOpen":true,"content":"-- Each devicVe type you create should have its own class which inherits from the QuickAppChild type.\nclass 'AirQualitySensor' (QuickAppChild)\n\nAirQualitySensor.class = 'com.fibaro.multilevelSensor'\n\nfunction AirQualitySensor:__init(device)\n    QuickAppChild.__init(self, device)\n    self:updateProperty(\"unit\", \"㎍/㎥\")\nend\n\nfunction AirQualitySensor:updateValue(value)\n    self:debug(\"[AirQualitySensor] Change value of \", self.unit, \" (device: \", self.id, \") from \", self.id, \" to \", value)\n    self:updateProperty(\"value\", value)\nend\n\nfunction AirQualitySensor:updateUnit(unit)\n    self:updateProperty(\"unit\", unit)\nend\n"}]}
